// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591

using ProtonPack.Data;
using SqlSugar;
using System.Configuration;
using WebThree.Shared.Data;
using static WebThree.Shared.Utilities;

namespace ProtonPack.Data
{
    public class CustomerDataManager : BaseDataManager<Customer>
    {
        internal CustomerDataManager(CompanyUser cu) : base(cu)
        {
        }

        public override ISugarQueryable<Customer> DefaultQuery()
        {
            var rc = base.DefaultQuery()
                .Mapper(c => c.Group, c => c.GroupID)
                .Mapper(c => c.Assets, c => c.Assets.First().AssetOwnerID)
                ;
            return rc;
        }

        public override Customer Update(Customer entity, Customer item = null)
        {
            if( null == item )
                item = Get(entity.ID);
            if( item.WalletBalance != entity.WalletBalance)
            {
                var manager = DataManagerFactory.GetDataManager<WalletTransaction, WalletTransactionDataManager>(CompanyUser);
                manager.CreateTransaction(entity, item, false);
            }
            return base.Update(entity, item);
        }

        public Customer GetByUserID(string userName)
        {
            return DefaultQuery().First(r => r.UserName == userName);
        }

        public List<Customer> GetByGroupID(Guid id)
        {
            return DefaultQuery(r => r.GroupID == id).ToList();
        }

        public int GetAllCustomerBalance()
        {
            int sum = 0;
            DefaultQuery().ToList().ForEach(r =>
            {
                sum += (int)r.WalletBalance;
            });
            return sum;
        }

        public Customer GetByWalletAddress(string walletAddress)
        {
            return DefaultQuery().First(r => r.WalletAddress == walletAddress);
        }


        public CustomerSummary GetSummary(Guid customerId)
        {
            var rc = new CustomerSummary();

            var customer = this.Get( customerId );

            rc.WalletAddress = customer.WalletAddress;

            var transactions = Context.Queryable<WalletTransaction>()
                .Includes(w => w.Rule, r => r.BehaviorType)
                .Where(w => w.RelatedEntityID == customerId).ToList();

            rc.CurrentBalance = customer.WalletBalance;
            rc.MediaInteractions = transactions.Count;

            rc.LikeData = transactions.Where(w => w.Rule != null && w.Rule.BehaviorTypeID == BehaviorTypes.Like)
                .GroupBy(w => w.CreatedDate.Date)
                .Select(w => new DataPoint { Date = w.Key, Value = w.Sum(s => s.TransactionAmount), BehaviorTypeID = BehaviorTypes.Like, BehaviorType = "Like" } )
                .ToList();

            rc.CommentData = transactions.Where(w => w.Rule != null && w.Rule.BehaviorTypeID == BehaviorTypes.Comment )
                .GroupBy(w => w.CreatedDate.Date)
                .Select(w => new DataPoint { Date = w.Key, Value = w.Sum(s => s.TransactionAmount), BehaviorTypeID = BehaviorTypes.Comment, BehaviorType = "Comment" })
                .ToList();

            rc.TipData = transactions.Where(w => w.Rule != null && w.Rule.BehaviorTypeID == BehaviorTypes.Tip)
                .GroupBy(w => w.CreatedDate.Date)
                .Select(w => new DataPoint { Date = w.Key, Value = w.Sum(s => s.TransactionAmount), BehaviorTypeID = BehaviorTypes.Tip, BehaviorType = "Tip" })
                .ToList();

            rc.TransactionHistory = transactions.Where( w => w.Rule != null ).Select( w => new DataPoint 
            { 
                Date = w.CreatedDate
                , Value = w.TransactionAmount
                , BehaviorTypeID = w.Rule.BehaviorTypeID 
                , BehaviorType = w.Rule.BehaviorType.AttributeName
            }).OrderByDescending(w => w.Date).ToList();

            return rc;
        }

    }
}
#pragma warning restore 1591
