// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591

using ProtonPack.Data;
using SqlSugar;
using System.Configuration;
using WebThree.Shared.Data;
using static WebThree.Shared.Utilities;

namespace ProtonPack.Data
{
    public static class BehaviorTypes
    {
        public static readonly Guid Like = new Guid("00000005-0000-0000-0000-000000000001");
        public static readonly Guid Comment = new Guid("00000005-0000-0000-0000-000000000002");
        public static readonly Guid Tip = new Guid("00000005-0000-0000-0000-000000000003");
    }


    public class RuleDataManager : BaseDataManager<Rule>
    {

        internal RuleDataManager(CompanyUser cu) : base(cu)
        {
        }


        public override ISugarQueryable<Rule> DefaultQuery()
        {
            var rc = base.DefaultQuery()
                .Mapper(r => r.Parameters, r => r.Parameters.First().RuleID)
                .Mapper(r => r.Group, r => r.GroupID)
                .Mapper(r => r.BehaviorType, r => r.BehaviorTypeID)
                .Mapper(r => r.RuleType, r => r.RuleTypeID)
                ;
            return rc;
        }


        public List<Rule> GetByGroupID( Guid id )
        {
            return DefaultQuery(r => r.GroupID == id).ToList();
        }


        public decimal ProcessLike( UserAssetData data )
        {
            var query = $@"SELECT R.RuleID, 0 as Deleted FROM Rules r JOIN Groups g ON R.GroupID = G.GroupID JOIN Customers c ON G.GroupID = C.GroupID
WHERE R.Deleted = 0 AND G.Active = 1 AND c.UserName = '{data.UserID}' AND R.BehaviorTypeID = '00000005-0000-0000-0000-000000000001'";

            var qData = Context.Queryable<Rule, Customer>((main, c) => new JoinQueryInfos(
              JoinType.Left, main.GroupID == c.GroupID
            )).Where((main, c) => main.BehaviorTypeID == BehaviorTypes.Like && c.UserName == data.UserID)
           .Select((main, c) => main).Single();


            using var processor = new RuleLogic { CompanyUser = this.CompanyUser };
            var rc = processor.ProcessRule(data, qData.ID);

            Console.WriteLine($"{data.UserID} : {rc}");
            return rc;
        }

        public decimal ProcessComment(UserAssetData data)
        {
            var query = $@"SELECT R.RuleID, 0 as Deleted 
FROM Rules r 
    JOIN Groups g ON R.GroupID = G.GroupID 
    JOIN Customers c ON G.GroupID = C.GroupID
WHERE R.Deleted = 0 AND G.Active = 1 AND c.UserName = '{data.UserID}' AND R.BehaviorTypeID = '00000005-0000-0000-0000-000000000002'";

            var qData = Context.Queryable<Rule, Customer>((main, c) => new JoinQueryInfos(
              JoinType.Left, main.GroupID == c.GroupID
            )).Where((main, c) => main.BehaviorTypeID == BehaviorTypes.Comment && c.UserName == data.UserID)
           .Select((main, c) => main).Single();

            if (qData != null)
            {
                using var processor = new RuleLogic { CompanyUser = this.CompanyUser };
                var rc = processor.ProcessRule(data, qData.ID);

                Console.WriteLine($"{data.UserID} : {rc}");
                return rc;
            }
            else
                throw new WebThreeException($"Configuration error for Rule for user '{data.UserID}'");
        }


        public bool ProcessTip(UserTipData data)
        {
            var query = $@"SELECT R.RuleID, 0 as Deleted FROM Rules r JOIN Groups g ON R.GroupID = G.GroupID JOIN Customers c ON G.GroupID = C.GroupID
WHERE R.Deleted = 0 AND G.Active = 1 AND c.UserName = '{data.FromUserID}' AND R.BehaviorTypeID = '00000005-0000-0000-0000-000000000003'";

            var qData = Context.Queryable<Rule, Customer>((main, c) => new JoinQueryInfos(
              JoinType.Left, main.GroupID == c.GroupID
            )).Where((main, c) => main.BehaviorTypeID == BehaviorTypes.Tip && c.UserName == data.FromUserID)
           .Select((main, c) => main).Single();


            if (qData != null)
            {
                using var processor = new RuleLogic { CompanyUser = this.CompanyUser };
                var rc = processor.ProcessRule(data, qData.ID);

                Console.WriteLine($"{data.ToUserID} : {rc}");
                return rc;
            }
            else
                throw new WebThreeException($"Configuration error for Rule for user '{data.FromUserID}'");
        }
    }
}
#pragma warning restore 1591
