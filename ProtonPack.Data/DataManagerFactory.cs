

// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `ProtonPack.T4`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Server=tcp:venkman-dev01.database.windows.net,1433;Database=WebThree_DEV;User ID=gozer_dev;password=**zapped**;`
//     Schema:                 `dbo`
//     Include Views:          `True`

//     Factory Name:          `SqlClientFactory`
// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591

using static WebThree.Shared.Utilities;
using WebThree.Shared.Data;

namespace ProtonPack.Data
{
    public static partial class DataManagerFactory
    {

        public static U GetDataManager<T, U>(CompanyUser cu) where U : IDataManager<T>
        {
            return (U)GetDataManager<T>(cu);
        }


        public static IDataManager<T> GetDataManager<T>(CompanyUser cu)
        {
            IDataManager<T> dataManager;
            var companyUser = cu;

            var type = (DataObjects)Enum.Parse(typeof(DataObjects), typeof(T).Name);
            switch (type)
            {
                case (DataObjects.Asset):
                    {
                        var manager = new AssetDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.Claim):
                    {
                        var manager = new ClaimDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.Media):
                    {
                        var manager = new MediaDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.Attribute):
                    {
                        var manager = new AttributeDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.Company):
                    {
                        var manager = new CompanyDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.Customer):
                    {
                        var manager = new CustomerDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.EventNft):
                    {
                        var manager = new EventNftDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.Event):
                    {
                        var manager = new EventDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.Group):
                    {
                        var manager = new GroupDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.IpfsAttribute):
                    {
                        var manager = new IpfsAttributeDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.IpfsItem):
                    {
                        var manager = new IpfsItemDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.NFT):
                    {
                        var manager = new NFTDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.Queue):
                    {
                        var manager = new QueueDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.RuleParameter):
                    {
                        var manager = new RuleParameterDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.Rule):
                    {
                        var manager = new RuleDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.SystemSetting):
                    {
                        var manager = new SystemSettingDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                case (DataObjects.WalletTransaction):
                    {
                        var manager = new WalletTransactionDataManager(companyUser);
                        dataManager = (IDataManager<T>)manager;
                        break;
                    }
                default:
                    throw new Exception($"Invalid Data Type: {nameof(T)}");
            }
            return dataManager;
        }
    }
}
#pragma warning restore 1591
