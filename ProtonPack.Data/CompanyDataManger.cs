// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591

using Newtonsoft.Json;
using ProtonPack.Data;
using System.Configuration;
using WebThree.Shared.Data;
using static WebThree.Shared.Utilities;

namespace ProtonPack.Data
{
    public class CompanyDataManager : BaseDataManager<Company>
    {
        internal CompanyDataManager(CompanyUser cu) : base(cu)
        {
        }


        public override Company Update(Company entity, Company item = null)
        {
            if (null == item)
                item = Get(entity.ID);
            if (item.WalletBalance != entity.WalletBalance)
            {
                using var manager = DataManagerFactory.GetDataManager<WalletTransaction, WalletTransactionDataManager>(CompanyUser);
                manager.CreateTransaction(entity, item, true);
            }
            return base.Update(entity, item);
        }

        public CompanySummary GetSummary(Guid companyId)
        {
            var rc = new CompanySummary();

            var company = this.Get(companyId);

            rc.WalletAddress = company.WalletAddress;

            var transactions = Context.Queryable<WalletTransaction>()
                .Includes(w => w.Rule, r => r.BehaviorType)
                .Where(w => w.RelatedEntityID == companyId).ToList();

            rc.CurrentBalance = company.WalletBalance;
            rc.MediaInteractions = transactions.Count;

            rc.LikeData = transactions.Where(w => w.Rule != null && w.Rule.BehaviorTypeID == BehaviorTypes.Like)
                .GroupBy(w => w.CreatedDate.Date)
                .Select(w => new DataPoint { Date = w.Key, Value = w.Sum(s => s.TransactionAmount), BehaviorTypeID = BehaviorTypes.Like, BehaviorType = "Like" })
                .ToList();

            rc.CommentData = transactions.Where(w => w.Rule != null && w.Rule.BehaviorTypeID == BehaviorTypes.Comment)
                .GroupBy(w => w.CreatedDate.Date)
                .Select(w => new DataPoint { Date = w.Key, Value = w.Sum(s => s.TransactionAmount), BehaviorTypeID = BehaviorTypes.Comment, BehaviorType = "Comment" })
                .ToList();

            rc.TransactionHistory = transactions.Where(w => w.Rule != null).Select(w => new DataPoint 
            {
                Date = w.CreatedDate
                , Value = w.TransactionAmount
                , BehaviorTypeID = w.Rule.BehaviorTypeID
                , BehaviorType = w.Rule.BehaviorType.AttributeName
            }).OrderByDescending(w => w.Date).ToList();

            return rc;
        }

        public Company UpdateEnvironment(EnvironmentData envData)
        {
            var company = Context.Queryable<Company>()
                .First(c => c.ID == CompanyUser.CompanyId );

            var data = JsonConvert.DeserializeObject<List<EnvironmentData>>(company.CompanyData);

            var env = data.FirstOrDefault( e => e.ContractID == envData.ContractID );
            if (env != null)
            {
                data.Remove(env);
            }
            data.Add(envData);

            company.CompanyData = JsonConvert.SerializeObject(data);

            return this.Update( company );
        }
    }


    public class AttributeDataManager : BaseDataManager<Attribute>
    {
        internal AttributeDataManager(CompanyUser cu) : base(cu)
        {
        }
    }
}
#pragma warning restore 1591
